// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: table_status.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTableStatus = `-- name: CreateTableStatus :one
INSERT INTO "table_status" (name, description)
VALUES ($1, $2)
RETURNING table_status_id, name, description, created_at
`

type CreateTableStatusParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateTableStatus(ctx context.Context, arg CreateTableStatusParams) (TableStatus, error) {
	row := q.queryRow(ctx, q.createTableStatusStmt, createTableStatus, arg.Name, arg.Description)
	var i TableStatus
	err := row.Scan(
		&i.TableStatusID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTableStatus = `-- name: DeleteTableStatus :exec
DELETE FROM "table_status"
WHERE table_status_id = $1
`

func (q *Queries) DeleteTableStatus(ctx context.Context, tableStatusID int32) error {
	_, err := q.exec(ctx, q.deleteTableStatusStmt, deleteTableStatus, tableStatusID)
	return err
}

const getAllTableStatuses = `-- name: GetAllTableStatuses :many
SELECT table_status_id, name, description, created_at
FROM "table_status"
ORDER BY name
`

func (q *Queries) GetAllTableStatuses(ctx context.Context) ([]TableStatus, error) {
	rows, err := q.query(ctx, q.getAllTableStatusesStmt, getAllTableStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TableStatus
	for rows.Next() {
		var i TableStatus
		if err := rows.Scan(
			&i.TableStatusID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTableStatusByID = `-- name: GetTableStatusByID :one
SELECT table_status_id, name, description, created_at
FROM "table_status"
WHERE table_status_id = $1
`

func (q *Queries) GetTableStatusByID(ctx context.Context, tableStatusID int32) (TableStatus, error) {
	row := q.queryRow(ctx, q.getTableStatusByIDStmt, getTableStatusByID, tableStatusID)
	var i TableStatus
	err := row.Scan(
		&i.TableStatusID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateTableStatus = `-- name: UpdateTableStatus :exec
UPDATE "table_status"
SET name = $2,
    description = $3
WHERE table_status_id = $1
`

type UpdateTableStatusParams struct {
	TableStatusID int32          `json:"table_status_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
}

func (q *Queries) UpdateTableStatus(ctx context.Context, arg UpdateTableStatusParams) error {
	_, err := q.exec(ctx, q.updateTableStatusStmt, updateTableStatus, arg.TableStatusID, arg.Name, arg.Description)
	return err
}
