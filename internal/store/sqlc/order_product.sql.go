// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order_product.sql

package sqlc

import (
	"context"
)

const createOrderProduct = `-- name: CreateOrderProduct :one
INSERT INTO "order_product" (order_id, product_id, quantity)
VALUES ($1, $2, COALESCE($3, 1))
RETURNING order_product_id, order_id, product_id, quantity
`

type CreateOrderProductParams struct {
	OrderID   int32       `json:"order_id"`
	ProductID int32       `json:"product_id"`
	Column3   interface{} `json:"column_3"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) (OrderProduct, error) {
	row := q.queryRow(ctx, q.createOrderProductStmt, createOrderProduct, arg.OrderID, arg.ProductID, arg.Column3)
	var i OrderProduct
	err := row.Scan(
		&i.OrderProductID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteOrderProduct = `-- name: DeleteOrderProduct :exec
DELETE FROM "order_product"
WHERE order_product_id = $1
`

func (q *Queries) DeleteOrderProduct(ctx context.Context, orderProductID int32) error {
	_, err := q.exec(ctx, q.deleteOrderProductStmt, deleteOrderProduct, orderProductID)
	return err
}

const getOrderProductByID = `-- name: GetOrderProductByID :one
SELECT order_product_id, order_id, product_id, quantity
FROM "order_product"
WHERE order_product_id = $1
`

func (q *Queries) GetOrderProductByID(ctx context.Context, orderProductID int32) (OrderProduct, error) {
	row := q.queryRow(ctx, q.getOrderProductByIDStmt, getOrderProductByID, orderProductID)
	var i OrderProduct
	err := row.Scan(
		&i.OrderProductID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getOrdersByProductID = `-- name: GetOrdersByProductID :many
SELECT order_product_id, order_id, product_id, quantity
FROM "order_product"
WHERE product_id = $1
`

func (q *Queries) GetOrdersByProductID(ctx context.Context, productID int32) ([]OrderProduct, error) {
	rows, err := q.query(ctx, q.getOrdersByProductIDStmt, getOrdersByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderProduct
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(
			&i.OrderProductID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByOrderID = `-- name: GetProductsByOrderID :many
SELECT order_product_id, order_id, product_id, quantity
FROM "order_product"
WHERE order_id = $1
`

func (q *Queries) GetProductsByOrderID(ctx context.Context, orderID int32) ([]OrderProduct, error) {
	rows, err := q.query(ctx, q.getProductsByOrderIDStmt, getProductsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderProduct
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(
			&i.OrderProductID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderProduct = `-- name: UpdateOrderProduct :exec
UPDATE "order_product"
SET quantity = $2
WHERE order_product_id = $1
`

type UpdateOrderProductParams struct {
	OrderProductID int32 `json:"order_product_id"`
	Quantity       int32 `json:"quantity"`
}

func (q *Queries) UpdateOrderProduct(ctx context.Context, arg UpdateOrderProductParams) error {
	_, err := q.exec(ctx, q.updateOrderProductStmt, updateOrderProduct, arg.OrderProductID, arg.Quantity)
	return err
}
