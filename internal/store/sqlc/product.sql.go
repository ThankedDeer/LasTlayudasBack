// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO "product" 
("name", "purchase_price", "sale_price", "stock", "category_id", "provider_id")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING "product_id", "created_at", "updated_at"
`

type CreateProductParams struct {
	Name          string
	PurchasePrice string
	SalePrice     string
	Stock         int32
	CategoryID    int32
	ProviderID    int32
}

type CreateProductRow struct {
	ProductID int32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (CreateProductRow, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.PurchasePrice,
		arg.SalePrice,
		arg.Stock,
		arg.CategoryID,
		arg.ProviderID,
	)
	var i CreateProductRow
	err := row.Scan(&i.ProductID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM "product"
WHERE "product_id" = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, productID)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT "product_id", "name", "purchase_price", "sale_price", "stock", "category_id", "provider_id", "created_at", "updated_at"
FROM "product"
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.PurchasePrice,
			&i.SalePrice,
			&i.Stock,
			&i.CategoryID,
			&i.ProviderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT "product_id", "name", "purchase_price", "sale_price", "stock", "category_id", "provider_id", "created_at", "updated_at"
FROM "product"
WHERE "product_id" = $1
`

func (q *Queries) GetProductByID(ctx context.Context, productID int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.PurchasePrice,
		&i.SalePrice,
		&i.Stock,
		&i.CategoryID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE "product"
SET "name" = $1, 
    "purchase_price" = $2, 
    "sale_price" = $3, 
    "stock" = $4, 
    "category_id" = $5, 
    "provider_id" = $6, 
    "updated_at" = current_timestamp
WHERE "product_id" = $7
RETURNING "updated_at"
`

type UpdateProductParams struct {
	Name          string
	PurchasePrice string
	SalePrice     string
	Stock         int32
	CategoryID    int32
	ProviderID    int32
	ProductID     int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		arg.PurchasePrice,
		arg.SalePrice,
		arg.Stock,
		arg.CategoryID,
		arg.ProviderID,
		arg.ProductID,
	)
	var updated_at sql.NullTime
	err := row.Scan(&updated_at)
	return updated_at, err
}
