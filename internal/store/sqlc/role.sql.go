// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "role" (name, description)
VALUES ($1, $2)
RETURNING role_id, name, description, created_at, updated_at
`

type CreateRoleParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.queryRow(ctx, q.createRoleStmt, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "role"
WHERE role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int32) error {
	_, err := q.exec(ctx, q.deleteRoleStmt, deleteRole, roleID)
	return err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT role_id, name, description, created_at, updated_at
FROM "role"
ORDER BY name
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.query(ctx, q.getAllRolesStmt, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.RoleID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT role_id, name, description, created_at, updated_at
FROM "role"
WHERE role_id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, roleID int32) (Role, error) {
	row := q.queryRow(ctx, q.getRoleByIDStmt, getRoleByID, roleID)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT role_id, name, description, created_at, updated_at
FROM "role"
WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.queryRow(ctx, q.getRoleByNameStmt, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.RoleID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE "role"
SET name = $2,
    description = $3,
    updated_at = current_timestamp
WHERE role_id = $1
`

type UpdateRoleParams struct {
	RoleID      int32          `json:"role_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.exec(ctx, q.updateRoleStmt, updateRole, arg.RoleID, arg.Name, arg.Description)
	return err
}
