// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (role_id, first_name, last_name, email, password, active)
VALUES ($1, $2, $3, $4, $5, COALESCE($6, true))
RETURNING user_id, role_id, first_name, last_name, email, active, created_at, updated_at
`

type CreateUserParams struct {
	RoleID    int32       `json:"role_id"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
	Column6   interface{} `json:"column_6"`
}

type CreateUserRow struct {
	UserID    int32        `json:"user_id"`
	RoleID    int32        `json:"role_id"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	Active    sql.NullBool `json:"active"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.RoleID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Column6,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, role_id, first_name, last_name, email, active, created_at, updated_at
FROM "user"
ORDER BY last_name, first_name
`

type GetAllUsersRow struct {
	UserID    int32        `json:"user_id"`
	RoleID    int32        `json:"role_id"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	Active    sql.NullBool `json:"active"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, role_id, first_name, last_name, email, active, created_at, updated_at
FROM "user"
WHERE email = $1
`

type GetUserByEmailRow struct {
	UserID    int32        `json:"user_id"`
	RoleID    int32        `json:"role_id"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	Active    sql.NullBool `json:"active"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, role_id, first_name, last_name, email, active, created_at, updated_at
FROM "user"
WHERE user_id = $1
`

type GetUserByIDRow struct {
	UserID    int32        `json:"user_id"`
	RoleID    int32        `json:"role_id"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	Active    sql.NullBool `json:"active"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (GetUserByIDRow, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET role_id = $2,
    first_name = $3,
    last_name = $4,
    email = $5,
    password = $6,
    active = $7,
    updated_at = current_timestamp
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID    int32        `json:"user_id"`
	RoleID    int32        `json:"role_id"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	Active    sql.NullBool `json:"active"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.UserID,
		arg.RoleID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Active,
	)
	return err
}
