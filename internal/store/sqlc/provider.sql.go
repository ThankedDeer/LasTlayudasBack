// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: provider.sql

package sqlc

import (
	"context"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO provider (name, phone, email, address)
VALUES ($1, $2, $3, $4)
RETURNING provider_id, name, phone, email, address, created_at, updated_at
`

type CreateProviderParams struct {
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Email   string `json:"email"`
	Address string `json:"address"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (Provider, error) {
	row := q.queryRow(ctx, q.createProviderStmt, createProvider,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Address,
	)
	var i Provider
	err := row.Scan(
		&i.ProviderID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE FROM provider
WHERE provider_id = $1
`

func (q *Queries) DeleteProvider(ctx context.Context, providerID int32) error {
	_, err := q.exec(ctx, q.deleteProviderStmt, deleteProvider, providerID)
	return err
}

const getAllProviders = `-- name: GetAllProviders :many
SELECT provider_id, name, phone, email, address, created_at, updated_at
FROM provider
ORDER BY name
`

func (q *Queries) GetAllProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.query(ctx, q.getAllProvidersStmt, getAllProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ProviderID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProviderByEmail = `-- name: GetProviderByEmail :one
SELECT provider_id, name, phone, email, address, created_at, updated_at
FROM provider
WHERE email = $1
`

func (q *Queries) GetProviderByEmail(ctx context.Context, email string) (Provider, error) {
	row := q.queryRow(ctx, q.getProviderByEmailStmt, getProviderByEmail, email)
	var i Provider
	err := row.Scan(
		&i.ProviderID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProviderByID = `-- name: GetProviderByID :one
SELECT provider_id, name, phone, email, address, created_at, updated_at
FROM provider
WHERE provider_id = $1
`

func (q *Queries) GetProviderByID(ctx context.Context, providerID int32) (Provider, error) {
	row := q.queryRow(ctx, q.getProviderByIDStmt, getProviderByID, providerID)
	var i Provider
	err := row.Scan(
		&i.ProviderID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProvider = `-- name: UpdateProvider :exec
UPDATE provider
SET name = $2,
    phone = $3,
    email = $4,
    address = $5,
    updated_at = current_timestamp
WHERE provider_id = $1
`

type UpdateProviderParams struct {
	ProviderID int32  `json:"provider_id"`
	Name       string `json:"name"`
	Phone      string `json:"phone"`
	Email      string `json:"email"`
	Address    string `json:"address"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) error {
	_, err := q.exec(ctx, q.updateProviderStmt, updateProvider,
		arg.ProviderID,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Address,
	)
	return err
}
