// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order_status.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createOrderStatus = `-- name: CreateOrderStatus :one
INSERT INTO "order_status" (name, description)
VALUES ($1, $2)
RETURNING order_status_id, name, description, created_at
`

type CreateOrderStatusParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateOrderStatus(ctx context.Context, arg CreateOrderStatusParams) (OrderStatus, error) {
	row := q.db.QueryRowContext(ctx, createOrderStatus, arg.Name, arg.Description)
	var i OrderStatus
	err := row.Scan(
		&i.OrderStatusID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrderStatus = `-- name: DeleteOrderStatus :exec
DELETE FROM "order_status"
WHERE order_status_id = $1
`

func (q *Queries) DeleteOrderStatus(ctx context.Context, orderStatusID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderStatus, orderStatusID)
	return err
}

const getAllOrderStatuses = `-- name: GetAllOrderStatuses :many
SELECT order_status_id, name, description, created_at
FROM "order_status"
ORDER BY name
`

func (q *Queries) GetAllOrderStatuses(ctx context.Context) ([]OrderStatus, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderStatus
	for rows.Next() {
		var i OrderStatus
		if err := rows.Scan(
			&i.OrderStatusID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderStatusByID = `-- name: GetOrderStatusByID :one
SELECT order_status_id, name, description, created_at
FROM "order_status"
WHERE order_status_id = $1
`

func (q *Queries) GetOrderStatusByID(ctx context.Context, orderStatusID int32) (OrderStatus, error) {
	row := q.db.QueryRowContext(ctx, getOrderStatusByID, orderStatusID)
	var i OrderStatus
	err := row.Scan(
		&i.OrderStatusID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE "order_status"
SET name = $2,
    description = $3
WHERE order_status_id = $1
`

type UpdateOrderStatusParams struct {
	OrderStatusID int32
	Name          string
	Description   sql.NullString
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.OrderStatusID, arg.Name, arg.Description)
	return err
}
