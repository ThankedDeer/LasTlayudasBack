// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package sqlc

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (order_date, table_id, status_id)
VALUES (current_timestamp, $1, $2)
RETURNING order_id, order_date, table_id, status_id
`

type CreateOrderParams struct {
	TableID  int32
	StatusID int32
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.TableID, arg.StatusID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.OrderDate,
		&i.TableID,
		&i.StatusID,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM "order"
WHERE order_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT order_id, order_date, table_id, status_id
FROM "order"
ORDER BY order_date DESC
`

func (q *Queries) GetAllOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderDate,
			&i.TableID,
			&i.StatusID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT order_id, order_date, table_id, status_id
FROM "order"
WHERE order_id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, orderID int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.OrderDate,
		&i.TableID,
		&i.StatusID,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE "order"
SET table_id = $2,
    status_id = $3
WHERE order_id = $1
`

type UpdateOrderParams struct {
	OrderID  int32
	TableID  int32
	StatusID int32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder, arg.OrderID, arg.TableID, arg.StatusID)
	return err
}
