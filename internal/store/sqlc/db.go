// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createOrderStmt, err = db.PrepareContext(ctx, createOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.createOrderProductStmt, err = db.PrepareContext(ctx, createOrderProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrderProduct: %w", err)
	}
	if q.createOrderStatusStmt, err = db.PrepareContext(ctx, createOrderStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrderStatus: %w", err)
	}
	if q.createPermissionStmt, err = db.PrepareContext(ctx, createPermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePermission: %w", err)
	}
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.createProviderStmt, err = db.PrepareContext(ctx, createProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProvider: %w", err)
	}
	if q.createRestaurantTableStmt, err = db.PrepareContext(ctx, createRestaurantTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRestaurantTable: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createRolePermissionStmt, err = db.PrepareContext(ctx, createRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRolePermission: %w", err)
	}
	if q.createTableStatusStmt, err = db.PrepareContext(ctx, createTableStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTableStatus: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWaiterStmt, err = db.PrepareContext(ctx, createWaiter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWaiter: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, deleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.deleteOrderStmt, err = db.PrepareContext(ctx, deleteOrder); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrder: %w", err)
	}
	if q.deleteOrderProductStmt, err = db.PrepareContext(ctx, deleteOrderProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrderProduct: %w", err)
	}
	if q.deleteOrderStatusStmt, err = db.PrepareContext(ctx, deleteOrderStatus); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrderStatus: %w", err)
	}
	if q.deletePermissionStmt, err = db.PrepareContext(ctx, deletePermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePermission: %w", err)
	}
	if q.deleteProductStmt, err = db.PrepareContext(ctx, deleteProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProduct: %w", err)
	}
	if q.deleteProviderStmt, err = db.PrepareContext(ctx, deleteProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProvider: %w", err)
	}
	if q.deleteRestaurantTableStmt, err = db.PrepareContext(ctx, deleteRestaurantTable); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRestaurantTable: %w", err)
	}
	if q.deleteRoleStmt, err = db.PrepareContext(ctx, deleteRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRole: %w", err)
	}
	if q.deleteRolePermissionStmt, err = db.PrepareContext(ctx, deleteRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRolePermission: %w", err)
	}
	if q.deleteTableStatusStmt, err = db.PrepareContext(ctx, deleteTableStatus); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTableStatus: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteWaiterStmt, err = db.PrepareContext(ctx, deleteWaiter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWaiter: %w", err)
	}
	if q.getAllCategoriesStmt, err = db.PrepareContext(ctx, getAllCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCategories: %w", err)
	}
	if q.getAllOrderStatusesStmt, err = db.PrepareContext(ctx, getAllOrderStatuses); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllOrderStatuses: %w", err)
	}
	if q.getAllOrdersStmt, err = db.PrepareContext(ctx, getAllOrders); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllOrders: %w", err)
	}
	if q.getAllPermissionsStmt, err = db.PrepareContext(ctx, getAllPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllPermissions: %w", err)
	}
	if q.getAllProductsStmt, err = db.PrepareContext(ctx, getAllProducts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllProducts: %w", err)
	}
	if q.getAllProvidersStmt, err = db.PrepareContext(ctx, getAllProviders); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllProviders: %w", err)
	}
	if q.getAllRestaurantTablesStmt, err = db.PrepareContext(ctx, getAllRestaurantTables); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRestaurantTables: %w", err)
	}
	if q.getAllRolesStmt, err = db.PrepareContext(ctx, getAllRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRoles: %w", err)
	}
	if q.getAllTableStatusesStmt, err = db.PrepareContext(ctx, getAllTableStatuses); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllTableStatuses: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getAllWaitersStmt, err = db.PrepareContext(ctx, getAllWaiters); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllWaiters: %w", err)
	}
	if q.getCategoryByIDStmt, err = db.PrepareContext(ctx, getCategoryByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryByID: %w", err)
	}
	if q.getCategoryByNameStmt, err = db.PrepareContext(ctx, getCategoryByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryByName: %w", err)
	}
	if q.getOrderByIDStmt, err = db.PrepareContext(ctx, getOrderByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderByID: %w", err)
	}
	if q.getOrderProductByIDStmt, err = db.PrepareContext(ctx, getOrderProductByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderProductByID: %w", err)
	}
	if q.getOrderStatusByIDStmt, err = db.PrepareContext(ctx, getOrderStatusByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderStatusByID: %w", err)
	}
	if q.getOrdersByProductIDStmt, err = db.PrepareContext(ctx, getOrdersByProductID); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrdersByProductID: %w", err)
	}
	if q.getPermissionByIDStmt, err = db.PrepareContext(ctx, getPermissionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPermissionByID: %w", err)
	}
	if q.getPermissionByNameStmt, err = db.PrepareContext(ctx, getPermissionByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetPermissionByName: %w", err)
	}
	if q.getPermissionsByRoleIDStmt, err = db.PrepareContext(ctx, getPermissionsByRoleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPermissionsByRoleID: %w", err)
	}
	if q.getProductByIDStmt, err = db.PrepareContext(ctx, getProductByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductByID: %w", err)
	}
	if q.getProductsByOrderIDStmt, err = db.PrepareContext(ctx, getProductsByOrderID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductsByOrderID: %w", err)
	}
	if q.getProviderByEmailStmt, err = db.PrepareContext(ctx, getProviderByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetProviderByEmail: %w", err)
	}
	if q.getProviderByIDStmt, err = db.PrepareContext(ctx, getProviderByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProviderByID: %w", err)
	}
	if q.getRestaurantTableByIDStmt, err = db.PrepareContext(ctx, getRestaurantTableByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRestaurantTableByID: %w", err)
	}
	if q.getRoleByIDStmt, err = db.PrepareContext(ctx, getRoleByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoleByID: %w", err)
	}
	if q.getRoleByNameStmt, err = db.PrepareContext(ctx, getRoleByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoleByName: %w", err)
	}
	if q.getRolePermissionByIDStmt, err = db.PrepareContext(ctx, getRolePermissionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRolePermissionByID: %w", err)
	}
	if q.getRolesByPermissionIDStmt, err = db.PrepareContext(ctx, getRolesByPermissionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRolesByPermissionID: %w", err)
	}
	if q.getTableStatusByIDStmt, err = db.PrepareContext(ctx, getTableStatusByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTableStatusByID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getWaiterByIDStmt, err = db.PrepareContext(ctx, getWaiterByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWaiterByID: %w", err)
	}
	if q.getWaiterByUserIDStmt, err = db.PrepareContext(ctx, getWaiterByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWaiterByUserID: %w", err)
	}
	if q.updateCategoryStmt, err = db.PrepareContext(ctx, updateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategory: %w", err)
	}
	if q.updateOrderStmt, err = db.PrepareContext(ctx, updateOrder); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrder: %w", err)
	}
	if q.updateOrderProductStmt, err = db.PrepareContext(ctx, updateOrderProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrderProduct: %w", err)
	}
	if q.updateOrderStatusStmt, err = db.PrepareContext(ctx, updateOrderStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrderStatus: %w", err)
	}
	if q.updatePermissionStmt, err = db.PrepareContext(ctx, updatePermission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePermission: %w", err)
	}
	if q.updateProductStmt, err = db.PrepareContext(ctx, updateProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProduct: %w", err)
	}
	if q.updateProviderStmt, err = db.PrepareContext(ctx, updateProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProvider: %w", err)
	}
	if q.updateRestaurantTableStmt, err = db.PrepareContext(ctx, updateRestaurantTable); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRestaurantTable: %w", err)
	}
	if q.updateRoleStmt, err = db.PrepareContext(ctx, updateRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRole: %w", err)
	}
	if q.updateTableStatusStmt, err = db.PrepareContext(ctx, updateTableStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTableStatus: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.createOrderProductStmt != nil {
		if cerr := q.createOrderProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderProductStmt: %w", cerr)
		}
	}
	if q.createOrderStatusStmt != nil {
		if cerr := q.createOrderStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStatusStmt: %w", cerr)
		}
	}
	if q.createPermissionStmt != nil {
		if cerr := q.createPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPermissionStmt: %w", cerr)
		}
	}
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.createProviderStmt != nil {
		if cerr := q.createProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProviderStmt: %w", cerr)
		}
	}
	if q.createRestaurantTableStmt != nil {
		if cerr := q.createRestaurantTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRestaurantTableStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createRolePermissionStmt != nil {
		if cerr := q.createRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRolePermissionStmt: %w", cerr)
		}
	}
	if q.createTableStatusStmt != nil {
		if cerr := q.createTableStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTableStatusStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWaiterStmt != nil {
		if cerr := q.createWaiterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWaiterStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.deleteOrderStmt != nil {
		if cerr := q.deleteOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderStmt: %w", cerr)
		}
	}
	if q.deleteOrderProductStmt != nil {
		if cerr := q.deleteOrderProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderProductStmt: %w", cerr)
		}
	}
	if q.deleteOrderStatusStmt != nil {
		if cerr := q.deleteOrderStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderStatusStmt: %w", cerr)
		}
	}
	if q.deletePermissionStmt != nil {
		if cerr := q.deletePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePermissionStmt: %w", cerr)
		}
	}
	if q.deleteProductStmt != nil {
		if cerr := q.deleteProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductStmt: %w", cerr)
		}
	}
	if q.deleteProviderStmt != nil {
		if cerr := q.deleteProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProviderStmt: %w", cerr)
		}
	}
	if q.deleteRestaurantTableStmt != nil {
		if cerr := q.deleteRestaurantTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRestaurantTableStmt: %w", cerr)
		}
	}
	if q.deleteRoleStmt != nil {
		if cerr := q.deleteRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoleStmt: %w", cerr)
		}
	}
	if q.deleteRolePermissionStmt != nil {
		if cerr := q.deleteRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRolePermissionStmt: %w", cerr)
		}
	}
	if q.deleteTableStatusStmt != nil {
		if cerr := q.deleteTableStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTableStatusStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteWaiterStmt != nil {
		if cerr := q.deleteWaiterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWaiterStmt: %w", cerr)
		}
	}
	if q.getAllCategoriesStmt != nil {
		if cerr := q.getAllCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCategoriesStmt: %w", cerr)
		}
	}
	if q.getAllOrderStatusesStmt != nil {
		if cerr := q.getAllOrderStatusesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllOrderStatusesStmt: %w", cerr)
		}
	}
	if q.getAllOrdersStmt != nil {
		if cerr := q.getAllOrdersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllOrdersStmt: %w", cerr)
		}
	}
	if q.getAllPermissionsStmt != nil {
		if cerr := q.getAllPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllPermissionsStmt: %w", cerr)
		}
	}
	if q.getAllProductsStmt != nil {
		if cerr := q.getAllProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllProductsStmt: %w", cerr)
		}
	}
	if q.getAllProvidersStmt != nil {
		if cerr := q.getAllProvidersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllProvidersStmt: %w", cerr)
		}
	}
	if q.getAllRestaurantTablesStmt != nil {
		if cerr := q.getAllRestaurantTablesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRestaurantTablesStmt: %w", cerr)
		}
	}
	if q.getAllRolesStmt != nil {
		if cerr := q.getAllRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRolesStmt: %w", cerr)
		}
	}
	if q.getAllTableStatusesStmt != nil {
		if cerr := q.getAllTableStatusesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllTableStatusesStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getAllWaitersStmt != nil {
		if cerr := q.getAllWaitersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllWaitersStmt: %w", cerr)
		}
	}
	if q.getCategoryByIDStmt != nil {
		if cerr := q.getCategoryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryByIDStmt: %w", cerr)
		}
	}
	if q.getCategoryByNameStmt != nil {
		if cerr := q.getCategoryByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryByNameStmt: %w", cerr)
		}
	}
	if q.getOrderByIDStmt != nil {
		if cerr := q.getOrderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderByIDStmt: %w", cerr)
		}
	}
	if q.getOrderProductByIDStmt != nil {
		if cerr := q.getOrderProductByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderProductByIDStmt: %w", cerr)
		}
	}
	if q.getOrderStatusByIDStmt != nil {
		if cerr := q.getOrderStatusByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderStatusByIDStmt: %w", cerr)
		}
	}
	if q.getOrdersByProductIDStmt != nil {
		if cerr := q.getOrdersByProductIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrdersByProductIDStmt: %w", cerr)
		}
	}
	if q.getPermissionByIDStmt != nil {
		if cerr := q.getPermissionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPermissionByIDStmt: %w", cerr)
		}
	}
	if q.getPermissionByNameStmt != nil {
		if cerr := q.getPermissionByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPermissionByNameStmt: %w", cerr)
		}
	}
	if q.getPermissionsByRoleIDStmt != nil {
		if cerr := q.getPermissionsByRoleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPermissionsByRoleIDStmt: %w", cerr)
		}
	}
	if q.getProductByIDStmt != nil {
		if cerr := q.getProductByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductByIDStmt: %w", cerr)
		}
	}
	if q.getProductsByOrderIDStmt != nil {
		if cerr := q.getProductsByOrderIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductsByOrderIDStmt: %w", cerr)
		}
	}
	if q.getProviderByEmailStmt != nil {
		if cerr := q.getProviderByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProviderByEmailStmt: %w", cerr)
		}
	}
	if q.getProviderByIDStmt != nil {
		if cerr := q.getProviderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProviderByIDStmt: %w", cerr)
		}
	}
	if q.getRestaurantTableByIDStmt != nil {
		if cerr := q.getRestaurantTableByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRestaurantTableByIDStmt: %w", cerr)
		}
	}
	if q.getRoleByIDStmt != nil {
		if cerr := q.getRoleByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleByIDStmt: %w", cerr)
		}
	}
	if q.getRoleByNameStmt != nil {
		if cerr := q.getRoleByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleByNameStmt: %w", cerr)
		}
	}
	if q.getRolePermissionByIDStmt != nil {
		if cerr := q.getRolePermissionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRolePermissionByIDStmt: %w", cerr)
		}
	}
	if q.getRolesByPermissionIDStmt != nil {
		if cerr := q.getRolesByPermissionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRolesByPermissionIDStmt: %w", cerr)
		}
	}
	if q.getTableStatusByIDStmt != nil {
		if cerr := q.getTableStatusByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTableStatusByIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getWaiterByIDStmt != nil {
		if cerr := q.getWaiterByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWaiterByIDStmt: %w", cerr)
		}
	}
	if q.getWaiterByUserIDStmt != nil {
		if cerr := q.getWaiterByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWaiterByUserIDStmt: %w", cerr)
		}
	}
	if q.updateCategoryStmt != nil {
		if cerr := q.updateCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryStmt: %w", cerr)
		}
	}
	if q.updateOrderStmt != nil {
		if cerr := q.updateOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrderStmt: %w", cerr)
		}
	}
	if q.updateOrderProductStmt != nil {
		if cerr := q.updateOrderProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrderProductStmt: %w", cerr)
		}
	}
	if q.updateOrderStatusStmt != nil {
		if cerr := q.updateOrderStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrderStatusStmt: %w", cerr)
		}
	}
	if q.updatePermissionStmt != nil {
		if cerr := q.updatePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePermissionStmt: %w", cerr)
		}
	}
	if q.updateProductStmt != nil {
		if cerr := q.updateProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStmt: %w", cerr)
		}
	}
	if q.updateProviderStmt != nil {
		if cerr := q.updateProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProviderStmt: %w", cerr)
		}
	}
	if q.updateRestaurantTableStmt != nil {
		if cerr := q.updateRestaurantTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRestaurantTableStmt: %w", cerr)
		}
	}
	if q.updateRoleStmt != nil {
		if cerr := q.updateRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoleStmt: %w", cerr)
		}
	}
	if q.updateTableStatusStmt != nil {
		if cerr := q.updateTableStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTableStatusStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	createCategoryStmt         *sql.Stmt
	createOrderStmt            *sql.Stmt
	createOrderProductStmt     *sql.Stmt
	createOrderStatusStmt      *sql.Stmt
	createPermissionStmt       *sql.Stmt
	createProductStmt          *sql.Stmt
	createProviderStmt         *sql.Stmt
	createRestaurantTableStmt  *sql.Stmt
	createRoleStmt             *sql.Stmt
	createRolePermissionStmt   *sql.Stmt
	createTableStatusStmt      *sql.Stmt
	createUserStmt             *sql.Stmt
	createWaiterStmt           *sql.Stmt
	deleteCategoryStmt         *sql.Stmt
	deleteOrderStmt            *sql.Stmt
	deleteOrderProductStmt     *sql.Stmt
	deleteOrderStatusStmt      *sql.Stmt
	deletePermissionStmt       *sql.Stmt
	deleteProductStmt          *sql.Stmt
	deleteProviderStmt         *sql.Stmt
	deleteRestaurantTableStmt  *sql.Stmt
	deleteRoleStmt             *sql.Stmt
	deleteRolePermissionStmt   *sql.Stmt
	deleteTableStatusStmt      *sql.Stmt
	deleteUserStmt             *sql.Stmt
	deleteWaiterStmt           *sql.Stmt
	getAllCategoriesStmt       *sql.Stmt
	getAllOrderStatusesStmt    *sql.Stmt
	getAllOrdersStmt           *sql.Stmt
	getAllPermissionsStmt      *sql.Stmt
	getAllProductsStmt         *sql.Stmt
	getAllProvidersStmt        *sql.Stmt
	getAllRestaurantTablesStmt *sql.Stmt
	getAllRolesStmt            *sql.Stmt
	getAllTableStatusesStmt    *sql.Stmt
	getAllUsersStmt            *sql.Stmt
	getAllWaitersStmt          *sql.Stmt
	getCategoryByIDStmt        *sql.Stmt
	getCategoryByNameStmt      *sql.Stmt
	getOrderByIDStmt           *sql.Stmt
	getOrderProductByIDStmt    *sql.Stmt
	getOrderStatusByIDStmt     *sql.Stmt
	getOrdersByProductIDStmt   *sql.Stmt
	getPermissionByIDStmt      *sql.Stmt
	getPermissionByNameStmt    *sql.Stmt
	getPermissionsByRoleIDStmt *sql.Stmt
	getProductByIDStmt         *sql.Stmt
	getProductsByOrderIDStmt   *sql.Stmt
	getProviderByEmailStmt     *sql.Stmt
	getProviderByIDStmt        *sql.Stmt
	getRestaurantTableByIDStmt *sql.Stmt
	getRoleByIDStmt            *sql.Stmt
	getRoleByNameStmt          *sql.Stmt
	getRolePermissionByIDStmt  *sql.Stmt
	getRolesByPermissionIDStmt *sql.Stmt
	getTableStatusByIDStmt     *sql.Stmt
	getUserByEmailStmt         *sql.Stmt
	getUserByIDStmt            *sql.Stmt
	getWaiterByIDStmt          *sql.Stmt
	getWaiterByUserIDStmt      *sql.Stmt
	updateCategoryStmt         *sql.Stmt
	updateOrderStmt            *sql.Stmt
	updateOrderProductStmt     *sql.Stmt
	updateOrderStatusStmt      *sql.Stmt
	updatePermissionStmt       *sql.Stmt
	updateProductStmt          *sql.Stmt
	updateProviderStmt         *sql.Stmt
	updateRestaurantTableStmt  *sql.Stmt
	updateRoleStmt             *sql.Stmt
	updateTableStatusStmt      *sql.Stmt
	updateUserStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		createCategoryStmt:         q.createCategoryStmt,
		createOrderStmt:            q.createOrderStmt,
		createOrderProductStmt:     q.createOrderProductStmt,
		createOrderStatusStmt:      q.createOrderStatusStmt,
		createPermissionStmt:       q.createPermissionStmt,
		createProductStmt:          q.createProductStmt,
		createProviderStmt:         q.createProviderStmt,
		createRestaurantTableStmt:  q.createRestaurantTableStmt,
		createRoleStmt:             q.createRoleStmt,
		createRolePermissionStmt:   q.createRolePermissionStmt,
		createTableStatusStmt:      q.createTableStatusStmt,
		createUserStmt:             q.createUserStmt,
		createWaiterStmt:           q.createWaiterStmt,
		deleteCategoryStmt:         q.deleteCategoryStmt,
		deleteOrderStmt:            q.deleteOrderStmt,
		deleteOrderProductStmt:     q.deleteOrderProductStmt,
		deleteOrderStatusStmt:      q.deleteOrderStatusStmt,
		deletePermissionStmt:       q.deletePermissionStmt,
		deleteProductStmt:          q.deleteProductStmt,
		deleteProviderStmt:         q.deleteProviderStmt,
		deleteRestaurantTableStmt:  q.deleteRestaurantTableStmt,
		deleteRoleStmt:             q.deleteRoleStmt,
		deleteRolePermissionStmt:   q.deleteRolePermissionStmt,
		deleteTableStatusStmt:      q.deleteTableStatusStmt,
		deleteUserStmt:             q.deleteUserStmt,
		deleteWaiterStmt:           q.deleteWaiterStmt,
		getAllCategoriesStmt:       q.getAllCategoriesStmt,
		getAllOrderStatusesStmt:    q.getAllOrderStatusesStmt,
		getAllOrdersStmt:           q.getAllOrdersStmt,
		getAllPermissionsStmt:      q.getAllPermissionsStmt,
		getAllProductsStmt:         q.getAllProductsStmt,
		getAllProvidersStmt:        q.getAllProvidersStmt,
		getAllRestaurantTablesStmt: q.getAllRestaurantTablesStmt,
		getAllRolesStmt:            q.getAllRolesStmt,
		getAllTableStatusesStmt:    q.getAllTableStatusesStmt,
		getAllUsersStmt:            q.getAllUsersStmt,
		getAllWaitersStmt:          q.getAllWaitersStmt,
		getCategoryByIDStmt:        q.getCategoryByIDStmt,
		getCategoryByNameStmt:      q.getCategoryByNameStmt,
		getOrderByIDStmt:           q.getOrderByIDStmt,
		getOrderProductByIDStmt:    q.getOrderProductByIDStmt,
		getOrderStatusByIDStmt:     q.getOrderStatusByIDStmt,
		getOrdersByProductIDStmt:   q.getOrdersByProductIDStmt,
		getPermissionByIDStmt:      q.getPermissionByIDStmt,
		getPermissionByNameStmt:    q.getPermissionByNameStmt,
		getPermissionsByRoleIDStmt: q.getPermissionsByRoleIDStmt,
		getProductByIDStmt:         q.getProductByIDStmt,
		getProductsByOrderIDStmt:   q.getProductsByOrderIDStmt,
		getProviderByEmailStmt:     q.getProviderByEmailStmt,
		getProviderByIDStmt:        q.getProviderByIDStmt,
		getRestaurantTableByIDStmt: q.getRestaurantTableByIDStmt,
		getRoleByIDStmt:            q.getRoleByIDStmt,
		getRoleByNameStmt:          q.getRoleByNameStmt,
		getRolePermissionByIDStmt:  q.getRolePermissionByIDStmt,
		getRolesByPermissionIDStmt: q.getRolesByPermissionIDStmt,
		getTableStatusByIDStmt:     q.getTableStatusByIDStmt,
		getUserByEmailStmt:         q.getUserByEmailStmt,
		getUserByIDStmt:            q.getUserByIDStmt,
		getWaiterByIDStmt:          q.getWaiterByIDStmt,
		getWaiterByUserIDStmt:      q.getWaiterByUserIDStmt,
		updateCategoryStmt:         q.updateCategoryStmt,
		updateOrderStmt:            q.updateOrderStmt,
		updateOrderProductStmt:     q.updateOrderProductStmt,
		updateOrderStatusStmt:      q.updateOrderStatusStmt,
		updatePermissionStmt:       q.updatePermissionStmt,
		updateProductStmt:          q.updateProductStmt,
		updateProviderStmt:         q.updateProviderStmt,
		updateRestaurantTableStmt:  q.updateRestaurantTableStmt,
		updateRoleStmt:             q.updateRoleStmt,
		updateTableStatusStmt:      q.updateTableStatusStmt,
		updateUserStmt:             q.updateUserStmt,
	}
}
