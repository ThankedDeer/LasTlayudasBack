// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    firstname,
    lastname,
    password,
    email
) VALUES (
    $1,$2,$3,$4
) RETURNING user_id, firstname, lastname, password, email, created_at
`

type CreateUserParams struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Password  string `json:"password"`
	Email     string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Password,
		arg.Email,
	)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, firstname, lastname, password, email, created_at FROM users
WHERE email =$1
`

func (q *Queries) GetUser(ctx context.Context, email string) (Users, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, email)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT user_id, firstname, lastname, password, email, created_at FROM users
WHERE email =$1
FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, email string) (Users, error) {
	row := q.queryRow(ctx, q.getUserForUpdateStmt, getUserForUpdate, email)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updatPassword = `-- name: UpdatPassword :one
UPDATE users SET password = $2
WHERE email = $1
RETURNING user_id, firstname, lastname, password, email, created_at
`

type UpdatPasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdatPassword(ctx context.Context, arg UpdatPasswordParams) (Users, error) {
	row := q.queryRow(ctx, q.updatPasswordStmt, updatPassword, arg.Email, arg.Password)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
